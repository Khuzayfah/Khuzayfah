import { Icon } from "astro-icon/components";

interface NavItem {
  name: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    name: "About",
    href: "#about",
    icon: "ri:user-3-line"
  },
  {
    name: "Services",
    href: "#services",
    icon: "ri:service-line"
  },
  {
    name: "Skills",
    href: "#skills",
    icon: "ri:terminal-box-line"
  },
  {
    name: "Projects",
    href: "#projects",
    icon: "ri:code-s-slash-line"
  },
  {
    name: "Contact",
    href: "#contact",
    icon: "ri:chat-3-line"
  }
];

<nav class="terminal-nav">
  <div class="terminal-nav-header">
    <div class="nav-prompt">
      <span class="prompt-user">guest</span>
      <span class="prompt-separator">@</span>
      <span class="prompt-host">digital-portfolio</span>
      <span class="prompt-path">:~$</span>
      <span class="prompt-command">ls -la sections/</span>
    </div>
  </div>
  
  <div class="terminal-nav-links">
    {navItems.map(item => (
      <a href={item.href} class="terminal-nav-link">
        <Icon name={item.icon} class="nav-icon" />
        <span class="nav-text">{item.name}</span>
      </a>
    ))}
  </div>
</nav>

<style>
  .terminal-nav {
    background-color: rgba(18, 18, 18, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(48, 54, 61, 0.6);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 2rem;
    position: sticky;
    top: 1rem;
    z-index: 100;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }
  
  .terminal-nav-header {
    margin-bottom: 1rem;
    border-bottom: 1px solid rgba(48, 54, 61, 0.4);
    padding-bottom: 0.75rem;
  }
  
  .nav-prompt {
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.25rem;
  }
  
  .prompt-user {
    color: #4CAF50;
  }
  
  .prompt-separator {
    color: #e6edf3;
  }
  
  .prompt-host {
    color: #2196F3;
  }
  
  .prompt-path {
    color: #e6edf3;
    margin-right: 0.5rem;
  }
  
  .prompt-command {
    color: rgba(229, 62, 62, 1);
  }
  
  .terminal-nav-links {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  
  .terminal-nav-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    text-decoration: none;
    color: #8b949e;
    background-color: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(48, 54, 61, 0.4);
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }
  
  .terminal-nav-link:hover {
    color: #e6edf3;
    background-color: rgba(229, 62, 62, 0.1);
    border-color: rgba(229, 62, 62, 0.3);
    transform: translateY(-2px);
  }
  
  .nav-icon {
    width: 1.25rem;
    height: 1.25rem;
  }
  
  @media (max-width: 640px) {
    .terminal-nav-links {
      flex-direction: column;
    }
    
    .terminal-nav-link {
      width: 100%;
    }
  }
</style>

<script>
  // Add active class to current section
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll<HTMLAnchorElement>('.terminal-nav-link');
    const sections = document.querySelectorAll<HTMLElement>('section[id]');
    
    // Log navigation initialization
    console.log('Navigation initialized', {
      links: navLinks.length,
      sections: sections.length,
      timestamp: new Date().toISOString()
    });
    
    // Smooth scrolling for anchor links
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        
        const targetId = link.getAttribute('href')?.substring(1);
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth'
            });
          }
        }
      });
    });
    
    // Highlight active section on scroll
    const highlightActiveSection = () => {
      let scrollY = window.scrollY;
      
      sections.forEach(section => {
        const sectionHeight = section.offsetHeight;
        const sectionTop = section.offsetTop - 100;
        const sectionId = section.getAttribute('id');
        
        if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {
          navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionId}`) {
              link.classList.add('active');
            }
          });
        }
      });
    };
    
    window.addEventListener('scroll', highlightActiveSection);
    
    // Initial highlight
    highlightActiveSection();
  });
</script> 